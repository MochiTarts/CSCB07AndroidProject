package com.b07.users;

import com.b07.database.adapter.DatabaseSelectAdapter;
import com.b07.exceptions.DatabaseSelectHelperException;
import com.b07.exceptions.UserSetException;
import java.sql.SQLException;

public class Employee extends User {

  private int id;
  private String name;
  private int age;
  private String address;
  private int roleId;
  private boolean alreadySet = false;
  
  /**
   * Standard Employee constructor, will automatically set authenticated to false.
   * @param id a valid user id from the database which corresponds to an Employee.
   * @param name the user's name.
   * @param age the user's age, must be greater than zero.
   * @param address the user's address, must be less than or equal to 100 characters in length.
   */
  public Employee(int id, String name, int age, String address) {
    this.id = id;
    this.name = name;
    this.age = age;
    this.address = address;
  }
  
  /**
   * Employee constructor for when the state of authentication is known.
   * @param id a valid user id from the database which corresponds to an Employee.
   * @param name the user's name.
   * @param age the user's age, must be greater than zero.
   * @param address the user's address, must be less than or equal to 100 characters in length.
   * @param authenticated determines whether the user will be initialized with authenticated
   *        set to true. User must have a password in the database.
   */
  public Employee(int id, String name, int age, String address, boolean authenticated) {
    this.id = id;
    this.name = name;
    this.age = age;
    this.address = address;
    if (authenticated) {
      try {
        authenticate(DatabaseSelectAdapter.getPassword(id));
      } catch (SQLException | DatabaseSelectHelperException e) {
        // Cannot authenticate the user, likely due to invalid id. This should be
        // checked before calling the constructor.
      }
    }
  }

  @Override
  public int getId() {
    return this.id;
  }

  @Override
  public void setId(int id) throws UserSetException {
    if (!alreadySet) {
      this.id = id;
      this.alreadySet = true;
    } else {
      throw new UserSetException("The id is already set for this user and cannot be changed");
    }
  }

  @Override
  public String getName() {
    return this.name;
  }

  @Override
  public void setName(String name) {
    this.name = name;
  }

  @Override
  public int getAge() {
    return this.age;
  }

  @Override
  public void setAge(int age) throws UserSetException {
    if (this.age >= 0) {
      this.age = age;
    } else {
      throw new UserSetException("Age must be 0 or greater");
    }
  }

  @Override
  public String getAddress() {
    return this.address;
  }

  @Override
  public void setAddress(String address) throws UserSetException {
    if (this.address != null
        && this.address.trim().length() <= 100
        && !this.address.trim().equals("")) {
      this.address = address;
    } else {
      throw new UserSetException("Address does not follow guidelines");
    }
  }

  @Override
  public int getRoleId() {
    return this.roleId;
  }
}
